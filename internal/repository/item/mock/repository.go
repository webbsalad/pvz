// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/item/repository.go

// Package mock_item is a generated GoMock package.
package mock_item

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/webbsalad/pvz/internal/model"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockRepository) AddProduct(ctx context.Context, product model.Product) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", ctx, product)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockRepositoryMockRecorder) AddProduct(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockRepository)(nil).AddProduct), ctx, product)
}

// CreateReception mocks base method.
func (m *MockRepository) CreateReception(ctx context.Context, pvzID model.PVZID) (model.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReception", ctx, pvzID)
	ret0, _ := ret[0].(model.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReception indicates an expected call of CreateReception.
func (mr *MockRepositoryMockRecorder) CreateReception(ctx, pvzID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReception", reflect.TypeOf((*MockRepository)(nil).CreateReception), ctx, pvzID)
}

// GetProductsByParams mocks base method.
func (m *MockRepository) GetProductsByParams(ctx context.Context, productFilter model.ProductFilter) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByParams", ctx, productFilter)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByParams indicates an expected call of GetProductsByParams.
func (mr *MockRepositoryMockRecorder) GetProductsByParams(ctx, productFilter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByParams", reflect.TypeOf((*MockRepository)(nil).GetProductsByParams), ctx, productFilter)
}

// GetReceptionsByParams mocks base method.
func (m *MockRepository) GetReceptionsByParams(ctx context.Context, receptionFilter model.ReceptionFilter) ([]model.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceptionsByParams", ctx, receptionFilter)
	ret0, _ := ret[0].([]model.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceptionsByParams indicates an expected call of GetReceptionsByParams.
func (mr *MockRepositoryMockRecorder) GetReceptionsByParams(ctx, receptionFilter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceptionsByParams", reflect.TypeOf((*MockRepository)(nil).GetReceptionsByParams), ctx, receptionFilter)
}

// RemoveProduct mocks base method.
func (m *MockRepository) RemoveProduct(ctx context.Context, receptionID model.ReceptionID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProduct", ctx, receptionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProduct indicates an expected call of RemoveProduct.
func (mr *MockRepositoryMockRecorder) RemoveProduct(ctx, receptionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProduct", reflect.TypeOf((*MockRepository)(nil).RemoveProduct), ctx, receptionID)
}

// UpdateReception mocks base method.
func (m *MockRepository) UpdateReception(ctx context.Context, reception model.Reception) (model.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReception", ctx, reception)
	ret0, _ := ret[0].(model.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReception indicates an expected call of UpdateReception.
func (mr *MockRepositoryMockRecorder) UpdateReception(ctx, reception interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReception", reflect.TypeOf((*MockRepository)(nil).UpdateReception), ctx, reception)
}
